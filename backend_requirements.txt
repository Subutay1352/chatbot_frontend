GO BACKEND GEREKSÄ°NÄ°MLERÄ° - CHATBOT UYGULAMASI
================================================

1. TEMEL YAPILANDIRMA
====================

KlasÃ¶r YapÄ±sÄ±:
chatbot_backend/
â”œâ”€â”€ main.go
â”œâ”€â”€ go.mod
â”œâ”€â”€ go.sum
â”œâ”€â”€ handlers/
â”‚   â”œâ”€â”€ chat.go
â”‚   â”œâ”€â”€ sessions.go
â”‚   â””â”€â”€ modes.go
â”œâ”€â”€ models/
â”‚   â”œâ”€â”€ message.go
â”‚   â”œâ”€â”€ session.go
â”‚   â””â”€â”€ mode.go
â”œâ”€â”€ services/
â”‚   â”œâ”€â”€ chat_service.go
â”‚   â””â”€â”€ ai_service.go
â”œâ”€â”€ middleware/
â”‚   â”œâ”€â”€ cors.go
â”‚   â””â”€â”€ auth.go
â””â”€â”€ config/
    â””â”€â”€ config.go

2. GO.MOD DOSYASI
=================

module chatbot_backend

go 1.21

require (
    github.com/gin-gonic/gin v1.9.1
    github.com/gin-contrib/cors v1.4.0
    github.com/google/uuid v1.3.0
    github.com/joho/godotenv v1.4.0
    gorm.io/gorm v1.25.4
    gorm.io/driver/sqlite v1.5.4
    github.com/gorilla/websocket v1.5.0
)

3. API ENDPOINT'LERÄ°
====================

Chat Endpoints:
POST /api/chat/send          // Mesaj gÃ¶nder
POST /api/chat/regenerate    // MesajÄ± yeniden oluÅŸtur
GET  /api/chat/messages/:id  // MesajlarÄ± getir
POST /api/chat/voice         // Ses mesajÄ± gÃ¶nder

Session Endpoints:
GET    /api/sessions         // TÃ¼m oturumlarÄ± getir
POST   /api/sessions         // Yeni oturum oluÅŸtur
GET    /api/sessions/:id     // Belirli oturumu getir
PUT    /api/sessions/:id     // Oturumu gÃ¼ncelle
DELETE /api/sessions/:id     // Oturumu sil
POST   /api/sessions/:id/favorite // Favoriye ekle/Ã§Ä±kar

Mode Endpoints:
GET /api/modes              // TÃ¼m bot kiÅŸiliklerini getir
GET /api/modes/:id          // Belirli kiÅŸiliÄŸi getir

WebSocket:
GET /ws/chat/:sessionId     // Real-time mesajlaÅŸma

4. VERÄ° MODELLERÄ°
=================

Message Model:
type Message struct {
    ID              string    `json:"id" gorm:"primaryKey"`
    Content         string    `json:"content"`
    Sender          string    `json:"sender"` // "user" | "bot"
    Timestamp       time.Time `json:"timestamp"`
    MessageType     string    `json:"messageType"` // "text" | "code" | "image" | "link"
    IsTyping        bool      `json:"isTyping"`
    IsFavorite      bool      `json:"isFavorite"`
    IsRegenerated   bool      `json:"isRegenerated"`
    OriginalMessageID string  `json:"originalMessageId,omitempty"`
    SessionID       string    `json:"sessionId"`
    Reactions       []Reaction `json:"reactions" gorm:"foreignKey:MessageID"`
    Metadata        Metadata  `json:"metadata" gorm:"embedded"`
}

Reaction Model:
type Reaction struct {
    ID        string `json:"id" gorm:"primaryKey"`
    Emoji     string `json:"emoji"`
    Count     int    `json:"count"`
    Users     string `json:"users"` // JSON array as string
    MessageID string `json:"messageId"`
}

Metadata Model:
type Metadata struct {
    Language    string      `json:"language,omitempty"`
    CodeBlock   bool        `json:"codeBlock,omitempty"`
    LinkPreview LinkPreview `json:"linkPreview,omitempty" gorm:"embedded"`
}

LinkPreview Model:
type LinkPreview struct {
    Title       string `json:"title"`
    Description string `json:"description"`
    Image       string `json:"image,omitempty"`
    URL         string `json:"url"`
    Domain      string `json:"domain"`
}

Session Model:
type Session struct {
    ID          string    `json:"id" gorm:"primaryKey"`
    Title       string    `json:"title"`
    CreatedAt   time.Time `json:"createdAt"`
    UpdatedAt   time.Time `json:"updatedAt"`
    IsFavorite  bool      `json:"isFavorite"`
    ModeID      string    `json:"modeId"`
    Mode        Mode      `json:"mode" gorm:"foreignKey:ModeID"`
    Messages    []Message `json:"messages" gorm:"foreignKey:SessionID"`
}

Mode Model:
type Mode struct {
    ID          string `json:"id" gorm:"primaryKey"`
    Name        string `json:"name"`
    Description string `json:"description"`
    Personality string `json:"personality"`
    Avatar      string `json:"avatar"`
    Color       string `json:"color"`
}

5. REQUEST/RESPONSE FORMATLARI
==============================

Send Message Request:
type SendMessageRequest struct {
    Message   string `json:"message" binding:"required"`
    SessionID string `json:"sessionId,omitempty"`
    ModeID    string `json:"modeId,omitempty"`
}

Send Message Response:
type SendMessageResponse struct {
    Message   Message `json:"message"`
    SessionID string  `json:"sessionId"`
}

Voice Message Request:
type VoiceMessageRequest struct {
    AudioData string `json:"audioData"` // Base64 encoded audio
    SessionID string `json:"sessionId,omitempty"`
    ModeID    string `json:"modeId,omitempty"`
}

Regenerate Message Request:
type RegenerateMessageRequest struct {
    MessageID string `json:"messageId" binding:"required"`
    SessionID string `json:"sessionId" binding:"required"`
}

Create Session Request:
type CreateSessionRequest struct {
    Title  string `json:"title"`
    ModeID string `json:"modeId" binding:"required"`
}

Update Session Request:
type UpdateSessionRequest struct {
    Title      string `json:"title,omitempty"`
    IsFavorite *bool  `json:"isFavorite,omitempty"`
}

6. CORS VE MIDDLEWARE AYARLARI
==============================

CORS Configuration:
config := cors.DefaultConfig()
config.AllowOrigins = []string{"http://localhost:5173", "http://127.0.0.1:5173"}
config.AllowMethods = []string{"GET", "POST", "PUT", "DELETE", "OPTIONS"}
config.AllowHeaders = []string{"Origin", "Content-Type", "Accept", "Authorization"}

7. AI SERVÄ°SÄ° INTERFACE
=======================

type AIService interface {
    SendMessage(message string, mode string) (string, error)
    ProcessVoiceMessage(audioData []byte) (string, error)
    RegenerateMessage(message string, mode string) (string, error)
}

8. WEBSOCKET YAPILANDIRMASI
===========================

WebSocket Hub:
type Hub struct {
    clients    map[*Client]bool
    broadcast  chan []byte
    register   chan *Client
    unregister chan *Client
}

Client:
type Client struct {
    hub      *Hub
    conn     *websocket.Conn
    send     chan []byte
    sessionID string
}

9. VERÄ°TABANI YAPILANDIRMASI
============================

SQLite Configuration:
db, err := gorm.Open(sqlite.Open("chatbot.db"), &gorm.Config{})
if err != nil {
    panic("failed to connect database")
}

Auto Migrate:
db.AutoMigrate(&Session{}, &Message{}, &Reaction{}, &Mode{})

10. DEFAULT BOT KÄ°ÅžÄ°LÄ°KLERÄ°
===========================

Default Modes:
[
    {
        "id": "assistant",
        "name": "Asistan",
        "description": "Genel amaÃ§lÄ± yardÄ±m",
        "personality": "YardÄ±mcÄ± ve bilgilendirici",
        "avatar": "ðŸ¤–",
        "color": "blue"
    },
    {
        "id": "creative",
        "name": "YaratÄ±cÄ±",
        "description": "YaratÄ±cÄ± yazÄ±m ve fikirler",
        "personality": "YaratÄ±cÄ± ve ilham verici",
        "avatar": "ðŸŽ¨",
        "color": "purple"
    },
    {
        "id": "friendly",
        "name": "ArkadaÅŸ",
        "description": "Samimi sohbet",
        "personality": "SÄ±cak ve samimi",
        "avatar": "ðŸ˜Š",
        "color": "green"
    },
    {
        "id": "analytical",
        "name": "Analitik",
        "description": "DetaylÄ± analiz",
        "personality": "MantÄ±klÄ± ve analitik",
        "avatar": "ðŸ§ ",
        "color": "indigo"
    },
    {
        "id": "developer",
        "name": "GeliÅŸtirici",
        "description": "Kod ve teknik yardÄ±m",
        "personality": "Teknik ve detaylÄ±",
        "avatar": "ðŸ’»",
        "color": "gray"
    },
    {
        "id": "quick",
        "name": "HÄ±zlÄ±",
        "description": "KÄ±sa ve Ã¶z yanÄ±tlar",
        "personality": "HÄ±zlÄ± ve Ã¶z",
        "avatar": "âš¡",
        "color": "yellow"
    }
]

11. ERROR HANDLING
==================

Error Response Format:
type ErrorResponse struct {
    Error   string `json:"error"`
    Message string `json:"message"`
    Code    int    `json:"code"`
}

12. ENVIRONMENT VARIABLES
=========================

.env dosyasÄ±:
PORT=8080
DB_PATH=chatbot.db
AI_API_KEY=your_ai_api_key_here
AI_API_URL=https://api.openai.com/v1/chat/completions

13. MAIN.GO YAPILANDIRMASI
==========================

func main() {
    // Load environment variables
    godotenv.Load()
    
    // Initialize database
    db := initDB()
    
    // Initialize AI service
    aiService := initAIService()
    
    // Initialize router
    r := gin.Default()
    
    // Setup CORS
    r.Use(cors.New(corsConfig))
    
    // Setup routes
    setupRoutes(r, db, aiService)
    
    // Start server
    port := os.Getenv("PORT")
    if port == "" {
        port = "8080"
    }
    r.Run(":" + port)
}

14. ROUTE SETUP
===============

func setupRoutes(r *gin.Engine, db *gorm.DB, aiService AIService) {
    api := r.Group("/api")
    
    // Chat routes
    chat := api.Group("/chat")
    chat.POST("/send", sendMessage(db, aiService))
    chat.POST("/regenerate", regenerateMessage(db, aiService))
    chat.GET("/messages/:id", getMessages(db))
    chat.POST("/voice", processVoiceMessage(db, aiService))
    
    // Session routes
    sessions := api.Group("/sessions")
    sessions.GET("", getSessions(db))
    sessions.POST("", createSession(db))
    sessions.GET("/:id", getSession(db))
    sessions.PUT("/:id", updateSession(db))
    sessions.DELETE("/:id", deleteSession(db))
    sessions.POST("/:id/favorite", toggleFavorite(db))
    
    // Mode routes
    modes := api.Group("/modes")
    modes.GET("", getModes(db))
    modes.GET("/:id", getMode(db))
    
    // WebSocket
    r.GET("/ws/chat/:sessionId", handleWebSocket)
}

15. FRONTEND ENTEGRASYONU Ä°Ã‡Ä°N GEREKLÄ° DEÄžÄ°ÅžÄ°KLÄ°KLER
====================================================

Frontend'te yapÄ±lacak deÄŸiÅŸiklikler:
1. chatService.ts dosyasÄ±nÄ± gerÃ§ek API Ã§aÄŸrÄ±larÄ± yapacak ÅŸekilde gÃ¼ncelle
2. LocalStorage kullanÄ±mÄ±nÄ± kaldÄ±r
3. TÃ¼m veri iÅŸlemlerini backend'den al
4. WebSocket baÄŸlantÄ±sÄ± ekle
5. Error handling'i geliÅŸtir
6. Loading states'i backend response'larÄ±na gÃ¶re ayarla

16. TEST ENDPOINT'LERÄ°
======================

Test iÃ§in kullanÄ±labilecek curl komutlarÄ±:

# Mesaj gÃ¶nder
curl -X POST http://localhost:8080/api/chat/send \
  -H "Content-Type: application/json" \
  -d '{"message": "Merhaba", "modeId": "assistant"}'

# OturumlarÄ± getir
curl -X GET http://localhost:8080/api/sessions

# Yeni oturum oluÅŸtur
curl -X POST http://localhost:8080/api/sessions \
  -H "Content-Type: application/json" \
  -d '{"title": "Test Sohbet", "modeId": "assistant"}'

# Bot kiÅŸiliklerini getir
curl -X GET http://localhost:8080/api/modes

17. DEPLOYMENT
==============

Dockerfile:
FROM golang:1.21-alpine AS builder
WORKDIR /app
COPY go.mod go.sum ./
RUN go mod download
COPY . .
RUN go build -o main .

FROM alpine:latest
RUN apk --no-cache add ca-certificates
WORKDIR /root/
COPY --from=builder /app/main .
COPY --from=builder /app/.env .
EXPOSE 8080
CMD ["./main"]

docker-compose.yml:
version: '3.8'
services:
  chatbot-backend:
    build: .
    ports:
      - "8080:8080"
    environment:
      - PORT=8080
      - DB_PATH=/data/chatbot.db
    volumes:
      - ./data:/data

18. GÃœVENLÄ°K
============

GÃ¼venlik Ã¶nlemleri:
1. Rate limiting
2. Input validation
3. SQL injection korumasÄ± (GORM ile otomatik)
4. CORS ayarlarÄ±
5. Environment variables kullanÄ±mÄ±
6. Error message'larÄ± gizleme

19. LOGGING
===========

Logging yapÄ±landÄ±rmasÄ±:
- Request/Response logging
- Error logging
- Performance monitoring
- Database query logging

20. PERFORMANS
==============

Performans optimizasyonlarÄ±:
1. Database indexing
2. Connection pooling
3. Caching (Redis)
4. Pagination
5. Lazy loading

Bu dosyayÄ± backend geliÅŸtiricisine vererek tam bir chatbot backend'i oluÅŸturabilirsiniz.
